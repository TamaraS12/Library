/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import controller.Controller;
import domain.Liability;
import domain.Member;
import domain.Publication;
import domain.Publisher;
import static form.FormMode.EDIT;
import static form.FormMode.NEW;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tamarica
 */
public class FrmAddLiability extends javax.swing.JDialog {

    FormMode mode;
    private DatePicker datePickerFrom;
    private DatePicker datePickerTo;
    private Liability liability;

    public FrmAddLiability(java.awt.Frame parent, boolean modal, FormMode mode) {
        super(parent, modal);
        initComponents();
        this.mode = mode;
        if (mode == EDIT) {
            cmbFullName.setEnabled(false);
            cmbTitle.setEnabled(false);
        }
        centerForm();
        setDatePickers();
        getMembers();
        getPublications();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMember = new javax.swing.JLabel();
        cmbFullName = new javax.swing.JComboBox();
        lblTitle = new javax.swing.JLabel();
        cmbTitle = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Liability");

        lblMember.setText("Member:");

        lblTitle.setText("Book:");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblMember, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbTitle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbFullName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMember)
                    .addComponent(cmbFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(cmbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnSave)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        if (mode == NEW) {
            try {
                Publication publication = (Publication) cmbTitle.getSelectedItem();
                Member member = (Member) cmbFullName.getSelectedItem();

//                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
//                Date dateFrom = simpleDateFormat.parse(datePickerFrom.getText().trim());
//                Date dateTo = simpleDateFormat.parse(datePickerTo.getText().trim());
                Liability liability = new Liability(member.getMemberID(), publication.getPublicationID(), datePickerFrom.getDate(), datePickerTo.getDate());
                Controller.getInstance().addLiability(liability);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else if (mode == EDIT) {
            Publication publication = (Publication) cmbTitle.getSelectedItem();
            Member member = (Member) cmbFullName.getSelectedItem();
            Liability liability = new Liability(this.liability.getLiabilityID(), datePickerFrom.getDate(), datePickerTo.getDate(), member, publication);
            try {
                Controller.getInstance().updateLiability(liability);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbFullName;
    private javax.swing.JComboBox cmbTitle;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMember;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    private void centerForm() {
        setLocationRelativeTo(null);
        setResizable(false);
    }

    private void setDatePickers() {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL; // Komponente da se Å¡ire horizontalno
        gbc.weightx = 1;

        DatePickerSettings dateFromSettings = new DatePickerSettings();
        dateFromSettings.setFormatForDatesCommonEra("yyyy-MM-dd");
        datePickerFrom = new DatePicker(dateFromSettings);
        datePickerFrom.setPreferredSize(new Dimension(266, 22));

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(-40, 0, 5, 0);

        jPanel1.add(new JLabel("Date From:"), gbc);

        gbc.gridx = 1;
        gbc.insets = new Insets(-40, 20, 5, 0);
        jPanel1.add(datePickerFrom, gbc);

        DatePickerSettings dateToSettings = new DatePickerSettings();
        dateToSettings.setFormatForDatesCommonEra("yyyy-MM-dd");
        datePickerTo = new DatePicker(dateToSettings);
        datePickerTo.setPreferredSize(new Dimension(266, 22));

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.insets = new Insets(0, 0, 5, 0);
        jPanel1.add(new JLabel("Date To:"), gbc);

        gbc.gridx = 1;
        gbc.insets = new Insets(0, 20, 5, 0);
        jPanel1.add(datePickerTo, gbc);
    }

    public void setFullNameComboBox(List<Member> members) {
        cmbFullName.removeAllItems();
        for (Member member : members) {
            cmbFullName.addItem(member);
        }
    }

    public void setTitleComboBox(List<Publication> publications) {
        cmbTitle.removeAllItems();
        for (Publication publication : publications) {
            cmbTitle.addItem(publication);
        }
    }

    public void getMembers() {
        try {
            Controller.getInstance().getAllMembers();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void setSelectedMember(List<Member> members) {
        setFullNameComboBox(members);

        Optional<Member> optionalMember = members.stream()
                .filter(member -> member.getMemberID().equals(liability.getMember().getMemberID()))
                .findFirst();

        if (optionalMember.isPresent()) {
            Member m = optionalMember.get();
            cmbFullName.setSelectedItem(m);
        }
    }

    public void setSelectedPublication(List<Publication> publications) {
        setTitleComboBox(publications);

        Optional<Publication> optionalPublication = publications.stream()
                .filter(publication -> publication.getPublicationID().equals(liability.getPublication().getPublicationID()))
                .findFirst();

        if (optionalPublication.isPresent()) {
            Publication p = optionalPublication.get();
            cmbTitle.setSelectedItem(p);
        }
    }

    public void setForm() {
        datePickerFrom.setDate(liability.getDateFrom());
        datePickerTo.setDate(liability.getDateTo());
    }

    private void getPublications() {
        try {
            Controller.getInstance().getAllPublications();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void setLiability(Liability liability) {
        this.liability = liability;
    }

    public FormMode getMode() {
        return mode;
    }

}
